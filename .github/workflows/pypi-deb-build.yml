name: Debian Packaging for Python Packages from PyPI

on:
  workflow_dispatch:
    branches:
      - master

env:
  DEB_BUILD_DOCKER_IMAGE: "pitop/pi-top-os-deb-build"
  DEB_BUILD_DOCKER_TAG: "bullseye-master"
  CHANGELOG_AUTHOR_NAME: "pi-top"
  CHANGELOG_AUTHOR_EMAIL: "deb-maintainers@pi-top.com"
  PACKAGECLOUD_REPO: "experimental"
  OS: "debian"
  DISTRO: "bullseye"
  DOCKER_ARCH: "linux/arm/v7"

jobs:
  build-debian-package:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        package: ["imutils"]
        include:
          - package: "pyfestival"
            deps: "festival-dev"
            patch: sed -i "s/'eststring'/'eststring', 'ncurses', 'gomp'/1" setup.py

          - package: "python-osc"
            sdist_dsc_options: "--package3 python3-osc"

          - package: "python-sonic"
            # TODO: replace with '--stdeb-patch-file'
            patch: "sed -i 's/PREADME.txt/README.rst/1' setup.py && sed -i '/pytest-runner/d' setup.py"
            # https://github.com/astraw/stdeb#stdeb-distutils-command-options
            # https://github.com/astraw/stdeb#stdebcfg-configuration-file
            sdist_dsc_options: "--package3 python3-sonic --depends3 python3-osc"

          - package: "dlib"
            deps: "build-essential cmake libopenblas-dev liblapack-dev libx11-dev libgtk-3-dev"

    steps:
      - name: Install stdeb
        run: |
          pip install stdeb requests

      - name: Download source
        run: |
          tarball_file_name="$(pypi-download ${{ matrix.package }} | awk '{print $2}')"
          echo "TARBALL_FILE_NAME=${tarball_file_name}" >> $GITHUB_ENV
          echo "PY_PACKAGE_SRC_NAME=$(echo ${tarball_file_name} | sed 's/.tar.gz//')" >> $GITHUB_ENV

      - name: Extract source
        run: |
          tar xvzf ${{ env.TARBALL_FILE_NAME }}

      - name: Patch source
        if: matrix.patch != ''
        run: |
          cd ${{ github.workspace }}/${{ env.PY_PACKAGE_SRC_NAME }}
          ${{ matrix.patch }}

      # TODO: Move to Dockerfile, use image for each build
      - name: Build in ARM Docker container
        run: |
          docker run --rm --privileged tonistiigi/binfmt --install all

          docker run -i \
            --volume ${{ github.workspace }}:${{ github.workspace }} \
            --workdir=${{ github.workspace }}/${{ env.PY_PACKAGE_SRC_NAME }} \
            --platform ${{ env.DOCKER_ARCH }} \
            ${{ env.OS }}:${{ env.DISTRO }} \
            /bin/bash -s <<EOF
              apt-get update
              apt-get install -y debhelper dh-python python3-all-dev python3-pip ${{ matrix.deps }}
              pip3 install stdeb
              python3 setup.py --command-packages stdeb.command \
                sdist_dsc ${{ matrix.sdist_dsc_options }} \
                --dist-dir=${{ github.workspace }}/artifacts
                bdist_deb
          EOF

      - name: Generate artifact name
        run: |
          echo "ARTIFACT_PREFIX=$(basename -s .dsc "$(find . -name "*.dsc")")" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_PREFIX }}.deb
          path: ./artifacts/*.deb

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_PREFIX }}.deb-src
          path: ./artifacts/*.tar.xz

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_PREFIX }}.metadata
          path: |
            ./artifacts/**
            !./artifacts/*.deb
            !./artifacts/*.tar.xz

      # Upload experimental build
      # debs
      - uses: docker://lpenz/ghaction-packagecloud:v0.3
        with:
          repository: ${{ env.PACKAGECLOUD_REPO }}/${{ env.OS }}/${{ env.DISTRO }}
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}

      # dsc
      - uses: docker://lpenz/ghaction-packagecloud:v0.3
        with:
          repository: ${{ env.PACKAGECLOUD_REPO }}/${{ env.OS }}/${{ env.DISTRO }}
          files: ./artifacts/${{ env.ARTIFACT_PREFIX }}.dsc
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
