name: Debian Packaging for Python Packages

on:
  push:
    branches:
      - master
  workflow_dispatch:
    branches:
      - master
  schedule:
    # Run daily at midnight
    - cron:  '0 0 * * *'

env:
  DEB_BUILD_DOCKER_IMAGE: "pitop/pi-top-os-deb-build"
  DEB_BUILD_DOCKER_TAG: "bullseye-master"
  CHANGELOG_AUTHOR_NAME: "pi-top"
  CHANGELOG_AUTHOR_EMAIL: "deb-maintainers@pi-top.com"
  PACKAGECLOUD_REPO: "experimental"
  OS: "debian"
  DISTRO: "bullseye"
  ARCH: "linux/arm/v7"

jobs:
  build-debian-package:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        # Also "dlib" and "onnxruntime"
        # --> preferably get from wheel

        # TODO: fix "python-sonic" requiring "python-osc"
        package: ["imutils", "python-sonic", "PyV4L2Camera"]
    steps:
      - name: Install stdeb
        run: |
          pip install stdeb

      - name: Download source
        run: |
          echo "TARBALL_FILE_NAME=$(pypi-download ${{ matrix.package }} | awk '{print $2}')" >> $GITHUB_ENV

      # https://github.com/gkvoelkl/python-sonic/pull/32
      - name: Fix python-sonic source
        if: matrix.package == 'python-sonic'
        run: |
          # Extract
          tar xvzf ${{ env.TARBALL_FILE_NAME }}

          # Modify
          cd ${{ github.workspace }}/${{ matrix.package }}-*
          sed -i "s/README.txt/README.rst/1" setup.py
          sed -i "/pytest-runner/d" setup.py

          # Repackage
          cd ${{ github.workspace }}/.tmp
          rm ${{ env.TARBALL_FILE_NAME }}
          tar -czf ${{ env.TARBALL_FILE_NAME }} ./${{ matrix.package }}-*/*

      - name: Create ARM Docker container
        run: |
          docker run --rm --privileged tonistiigi/binfmt --install all

          docker run -i \
            --name deb-build \
            --volume ${{ github.workspace }}:${{ github.workspace }} \
            --workdir=${{ github.workspace }} \
            --platform ${{ env.ARCH }} \
            ${{ env.OS }}:${{ env.DISTRO }} \
            /bin/bash -s <<EOF
              apt-get update
              apt-get install -y debhelper dh-python libv4l-dev python3-all-dev python3-pip
              pip3 install stdeb && py2dsc-deb ${{ env.TARBALL_FILE_NAME }}
            EOF

      - run: mv deb_dist artifacts

      - name: Generate artifact name
        run: |
          echo "ARTIFACT_PREFIX=$(basename -s .dsc "$(find . -name "*.dsc")")" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_PREFIX }}.deb
          path: ./artifacts/*.deb

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_PREFIX }}.deb-src
          path: ./artifacts/*.tar.xz

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_PREFIX }}.metadata
          path: |
            ./artifacts/**
            !./artifacts/*.deb
            !./artifacts/*.tar.xz

      # Upload experimental build
      - uses: docker://lpenz/ghaction-packagecloud:v0.3
        with:
          repository: ${{ env.PACKAGECLOUD_REPO }}/${{ env.OS }}/${{ env.DISTRO }}
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
          files: ./deb/*.dsc
